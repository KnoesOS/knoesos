# ansible-pull - Automate execution of Ansible's pull mode.

description  "ansible-pull"
version  "0.1.0"

start on started network-services

stop on runlevel [016]

#respawn
#respawn limit 10 5
umask 0022

env DEFAULT_FILE=/etc/default/ansible-pull

console log

pre-start script

  # stop job from continuing if no config file found for daemon
  [ ! -f $DEFAULT_FILE ] \
    && logger -is -t "$UPSTART_JOB" \
      "ERROR: ansible-pull DEFAULT_FILE missing! not starting!" \
    && { stop; exit 0; }
   
  # source the default file
  . $DEFAULT_FILE

  # stop job from continuing if enabled is not set to true
  [ "$ENABLED" != "1"  ] \
    && logger -is -t "$UPSTART_JOB" \
      "INFO: ansible-pull is disabled! not starting!" \
    && { stop; exit 0; }

  # stop job from continuing if ansible-pull is not an executable
  test -x $ANSIBLE_PULL_BIN || { stop; exit 0; }

end script














exec restart main-job




stop on runlevel [016]


respawn

exec /usr/local/bin/queue-worker

umask 0002

instance $DB
usage "DB - name of database instance"


console output








# /etc/init/timer.conf

instance $JOB_TO_RUN

script
  for var in SLEEP JOB_TO_RUN
  do
    eval val=\${$var}
    if [ -z "$val" ]
    then
      logger -t $0 "ERROR: variable $var not specified"
      exit 1
    fi
  done

  eval _sleep=\${SLEEP}
  eval _job=\${JOB_TO_RUN}

  while [ 1 ]
  do
    stop  $_job || true
    sleep $_sleep
    start $_job || true
  done
end script




# /etc/init/timeout.conf
stop on stopping JOB=$JOB_TO_WAIT_FOR
kill timeout 1
manual

export JOB_TO_WAIT_FOR
export TIMEOUT

script
  sleep $TIMEOUT
  initctl stop $JOB_TO_WAIT_FOR
end script


